# -*- coding: utf-8 -*-
"""model.ipynb adlı not defterinin kopyası

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q3bOPGPyCU9PsWvmPvkS5d-6XUyU-bfj
"""
import streamlit as st
import base64
import numpy as np
import pandas as pd

import seaborn as sns
from matplotlib import pyplot as plt

from PIL import Image
import pickle
from streamlit_autorefresh import st_autorefresh
from streamlit_option_menu import option_menu
import joblib
from sklearn.pipeline import Pipeline

st.set_page_config(
    page_title="Laptop Price Prediction",
    page_icon="💻",
    initial_sidebar_state="expanded",
)


with st.sidebar:
    selected = option_menu(
        menu_title=None,
        options=["Giriş", "EDA", "Tavsiye Sistemi", "Model Tahmini", "Model Değerlendirmesi"],
        default_index=0
    )

def get_base64_of_bin_file(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()

def get_base64_of_bin_file(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()


def set_png_as_page_bg(png_file):
    bin_str = get_base64_of_bin_file(png_file)
    page_bg_img = f"""
    <style>
    [data-testid="stSidebar"] > div:first-child {{
        background-image: url("data:image/png;base64,{bin_str}");
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        border-radius: 15px;
        overflow: visible;

    }}
    </style>
    """
    st.markdown(page_bg_img, unsafe_allow_html=True)

sidebar_bg_image = "sidebar.png"

def set_png_as_page_bg(png_file):
    bin_str = get_base64_of_bin_file(png_file)
    page_bg_img = f"""
    <style>
    [data-testid="stSidebar"] > div:first-child {{
        background-image: url("data:image/png;base64,{bin_str}");
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        border-radius: 15px;
        overflow: visible;

    }}
    </style>
    """
    st.markdown(page_bg_img, unsafe_allow_html=True)


set_png_as_page_bg(sidebar_bg_image)
def get_raw_data():
    """
    This function returns a pandas DataFrame with the raw data.
    """
    raw_df = pd.read_csv('datasets/raw_df.csv')
    return raw_df

def get_cleaned_data():
    """
    This function return a pandas DataFrame with the cleaned data.
    """
    clean_data = pd.read_csv('datasets/all_cleaned.csv')
    return clean_data

df = get_cleaned_data()



def summary_table(df):

    summary = {
    "Değişken Sayısı": [len(df.columns)],
    "Gözlem Sayısı": [df.shape[0]],
    "Eksik Hücreler": [df.isnull().sum().sum()],
    #"Missing Cells (%)": [round(df.isnull().sum().sum() / df.shape[0] * 100, 2)],
    "Yinelenen Satırlar": [df.duplicated().sum()],
    "Yinelenen Satırlar (%)": [round(df.duplicated().sum() / df.shape[0] * 100, 2)],
    "Kategorik Değişkenler": [len([i for i in df.columns if df[i].dtype==object])],
    "Sayısal Değişkenler": [len([i for i in df.columns if df[i].dtype!=object])],
    }
    return pd.DataFrame(summary).T.rename(columns={0: 'Values'})


def grab_col_names(dataframe, cat_th=10, car_th=35):  # kategorik, nümerik değişkenleri ayıklamak için
  ###cat_cols
  cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == "O"]
  num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and
                 dataframe[col].dtypes != "O"]
  cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and
                 dataframe[col].dtypes == "O"]
  cat_cols = cat_cols + num_but_cat
  cat_cols = [col for col in cat_cols if col not in cat_but_car]
  ###num_cols
  num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != "O"]
  num_cols = [col for col in num_cols if col not in num_but_cat]
  print(f"observations: {dataframe.shape[0]}")
  print(f"variables: {dataframe.shape[1]}")
  print(f"cat_cols: {len(cat_cols)}")
  print(f"num_cols: {len(num_cols)}")
  print(f"cat_but_car: {len(cat_but_car)}", f"cat_but_car name: {cat_but_car}")
  print(f"num_but_cat: {len(num_but_cat)}", f"num_but_cat name: {num_but_cat}")
  return cat_cols, num_cols, cat_but_car

def num_summary(dataframe, col_name, plot=False):
    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.99]
    col1, col2 = st.columns([1, 3])
    with col1:
        st.write(dataframe[col_name].describe(quantiles).T)
    with col2:
        if plot:
            fig, ax = plt.subplots(figsize=(10, 6))
            dataframe[col_name].hist(bins=20, color="#384959")
            plt.xlabel("Value", fontsize=14)
            plt.ylabel("Frequency", fontsize=14)
            plt.title(col_name, fontsize=14)
            st.pyplot(fig)


#######################INTRODUCTION#########################

slide_images = [
        "introduction_slideshow/slideshow-1.jpg",
        "introduction_slideshow/slideshow-2.jpg",
        "introduction_slideshow/slideshow-3.jpg",
        "introduction_slideshow/slideshow-4.jpg",
        "introduction_slideshow/slideshow-5.jpeg",
        "introduction_slideshow/slideshow-6.jpeg",
        "introduction_slideshow/slideshow-7.jpeg",
        "introduction_slideshow/slideshow-8.jpg"
]

refresh_rate = 3
#INTRODUCTION
if selected == 'Giriş':
    count = st_autorefresh(interval=refresh_rate * 1000, key="slideshow")
    col1, col2 = st.columns([2, 8])
    with col1:
        st.image("Logo.png", width=165)
    with col2:
        st.title("Laptop Fiyat Tahmini ve Öneri Sistemi")
    st.header("Giriş")


    slide_index = count % len(slide_images)
    slide_image = Image.open(slide_images[slide_index])
    slide_image = slide_image.resize((400, 250))
    st.image(slide_image, use_column_width=True)
    st.markdown("""
Teknoloji ve internetin hızla yayılması, dizüstü bilgisayar gibi elektronik cihazların hayatımızdaki önemini artırmıştır. Kullanıcıların, çeşitli özelliklere ve fiyat aralıklarına sahip laptoplar arasından en uygun olanını seçmesi, karmaşık ve zaman alıcı bir süreç olabilir. Bu proje, kullanıcıların ihtiyaçlarına ve bütçelerine en uygun laptopları önermek amacıyla geliştirilmiştir.

Proje kapsamında, bir laptop fiyat tahmin ve öneri sistemi oluşturulmuştur. Sistem, çeşitli donanım ve yazılım özellikleri göz önünde bulundurarak kullanıcıya en uygun laptop seçeneklerini sunmayı hedefler. Kullanıcıların tercihlerini ve beklentilerini dikkate alarak, en uygun fiyat-performans oranına sahip laptopları belirlemeye çalışır.

Bu çalışmada, veri bilimi ve makine öğrenimi yöntemleri kullanılarak laptopların fiyatları tahmin edilmekte ve kullanıcıya önerilerde bulunulmaktadır. Proje, özellikle teknolojik cihaz satın alırken doğru bilgiye hızlı ve etkili bir şekilde ulaşmak isteyen kullanıcılar için büyük bir kolaylık sağlamayı amaçlamaktadır.
    """)

    st.markdown(""" ### Amaçlar
    - Kullanıcı İhtiyaçlarına Uygun Öneriler Sunma: Kullanıcıların belirlediği donanım ve yazılım özelliklerine göre en uygun laptop seçeneklerini önerme.
    - Fiyat Tahmini: Makine öğrenimi modelleri kullanarak, laptopların piyasa fiyatlarını tahmin etme.
    - Kullanıcı Dostu Arayüz: Kullanıcıların kolayca kullanabileceği, anlaşılır ve etkileşimli bir web arayüzü sağlama.
    - Veri Analizi ve Görselleştirme: Toplanan verileri analiz ederek, kullanıcıya anlamlı bilgiler sunma ve bu bilgileri görselleştirme.
    """)

    image1= Image.open("introduction.PNG")
    width, height = image1.size
    image1 = image1.resize((600, 300))
    st.image(image1)


    st.markdown("""
        ### Veri Seti
Bu projede kullanılan veri seti, Türkiye'nin önde gelen e-ticaret sitelerinden Trendyol'dan web scraping yöntemiyle elde edilmiştir. Web scraping süreci boyunca, dizüstü bilgisayarların çeşitli donanım ve yazılım özellikleri ile fiyatlarına ilişkin veriler toplanmıştır.

Toplanan verilerin güvenilirliğini ve doğruluğunu artırmak amacıyla, yalnızca kullanıcılar tarafından derecelendirilmiş laptoplar analize dahil edilmiştir. Ürün derecelendirmesi olmayan kayıtlar çıkarılarak, sadece kullanıcı geri bildirimlerine sahip ürünler üzerinden değerlendirme yapılması sağlanmıştır.
        """)

    image2= Image.open("trendyol.jpeg")
    width, height = image2.size
    image2 = image2.resize((600, 300))
    st.image(image2, caption='Trendyol')

################################EDA#####################################

elif selected == 'EDA':
    col1, col2 = st.columns([2, 8])

    with col1:
        st.image("Logo.png", width=185)
    with col2:
        # Başlık ve Açıklama
        st.markdown("<h1 style='margin-top: 40px;'>EDA</h1>", unsafe_allow_html=True)

    df_c = get_cleaned_data()
    df_raw = get_raw_data()
    st.header("Veri Seti İncelemesi")

    dataset_choice = st.radio("İncelemek İçin Veri Seti Seçiniz", ("İşlenmemiş Veri Seti", "İşlenmiş Veri Seti"))

    if dataset_choice == "İşlenmemiş Veri Seti":
            if st.button("Head"):
                st.write(df_raw.head())

            if st.button("Tail"):
                st.write(df_raw.tail())

            if st.button("Tüm veriyi göster"):
                st.dataframe(df_raw)

    elif dataset_choice == "İşlenmiş Veri Seti":
        if st.button("Head"):
            st.write(df_c.head())
        if st.button("Tail"):
            st.write(df_c.tail())
        if st.button("Tüm veriyi göster"):
            st.dataframe(df_c)

    st.header("Veri Seti Özeti")
    if st.button("İşlenmemiş veri seti"):
        st.write(summary_table(df_raw))
        cat_cols, num_cols, cat_but_car = grab_col_names(df_raw)
        df_cat_cols = pd.DataFrame({"Kategorik Sütunlar": cat_cols})
        df_num_cols = pd.DataFrame({"Sayısal Sütunlar": num_cols})
        df_car_cols = pd.DataFrame({"Kardinal Sütunlar": cat_but_car})
        col1, col2, col3 = st.columns(3)
        with col1:
            st.write(df_cat_cols)

        with col2:
            st.write(df_num_cols)

        with col3:
            st.write(df_car_cols)


    if st.button("İşlenmiş veri seti"):
        st.write(summary_table(df_c))
        cat_cols, num_cols, cat_but_car = grab_col_names(df_c)
        df_cat_cols = pd.DataFrame({"Kategorik Sütunlar": cat_cols})
        df_num_cols = pd.DataFrame({"Sayısal Sütunlar": num_cols})
        df_car_cols = pd.DataFrame({"Kardinal Sütunlar": cat_but_car})
        col1, col2, col3 = st.columns(3)
        with col1:
            st.write(df_cat_cols)

        with col2:
            st.write(df_num_cols)

        with col3:
            st.write(df_car_cols)

    st.header("Scatter Plot")
    cat_cols, num_cols, cat_but_car = grab_col_names(df_c)
    x_axis = st.selectbox('X', num_cols)
    y_axis = st.selectbox('Y', num_cols)
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.scatterplot(x=df_c[x_axis], y=df_c[y_axis], ax=ax, color="#384959")
    plt.title(f'Scatter Plot: {x_axis} vs. {y_axis}', fontsize=15)
    plt.xlabel(x_axis, fontsize=14)
    plt.ylabel(y_axis, fontsize=14)
    plt.grid(True)
    plt.tight_layout()
    st.pyplot(fig)

    st.header("Sayısal Sütun Analizi")
    selected_col = st.selectbox('Bir sütun seçiniz', num_cols)
    num_summary(df_c, selected_col, plot=True)

    st.header("Hedef Değişken ve Kategorik Değişkenler")
    target = 'Ürün Fiyatı (TL)'  # Hedef değişkenin adı

    selected_column = st.selectbox('Lütfen bir kategorik sütun seçin', cat_cols)

    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x=df[selected_column], y=df[target], ax=ax, ci=None, color="#384959")
    plt.title(f'{selected_column} Sütunu ile {target} Arasındaki İlişki', fontsize=15)
    plt.xlabel(selected_column, fontsize=14)
    plt.ylabel(target, fontsize=14)
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    st.pyplot(fig)

    st.header("Fiyat Aralığı ve Sayısal Sütunlar")
    price_range = 'Fiyat Aralığı'

    selected_num_column = st.selectbox('Lütfen bir sayısal sütun seçin', num_cols)


    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x=df_c[price_range], y=df_c[selected_num_column], ax=ax, ci=None, color="#384959")
    plt.title(f'{price_range} ile {selected_num_column} Arasındaki İlişki', fontsize=15)
    plt.xlabel(price_range, fontsize=14)
    plt.ylabel(selected_num_column, fontsize=14)
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    st.pyplot(fig)

    st.header("Ürün ve Müşteri")
    selected_feature = st.selectbox('Bir özellik seçin ve görselleştirin:',
                                    ['Ürün Puanı', 'Ürün Favorisi', 'Ürün Puan Sayısı'])


    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x='Ürün Markası', y=selected_feature, data=df_c, ax=ax, palette='viridis')
    ax.set_title(f'{selected_feature} by Product', fontsize=15)
    ax.set_xlabel('Ürün Markası', fontsize=14)
    ax.set_ylabel(selected_feature, fontsize=14)
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    st.pyplot(fig)


    def corr_map(df_c, width=14, height=6, annot_kws=15):
        # Sadece sayısal sütunları seçme
        numeric_df = df_c.select_dtypes(include=[np.number])
        mtx = np.triu(numeric_df.corr())
        f, ax = plt.subplots(figsize=(width, height))
        sns.heatmap(numeric_df.corr(),
                    annot=True,
                    fmt=".2f",
                    ax=ax,
                    vmin=-1,  # Minimum korelasyon değeri (-1 tam negatif korelasyon)
                    vmax=1,  # Maksimum korelasyon değeri (1 tam pozitif korelasyon)
                    cmap="RdBu",  # Renk haritası (RdBu: kırmızı-mavi)
                    mask=mtx,
                    linewidths=0.5,
                    linecolor='black',
                    cbar_kws={"shrink": .8},
                    annot_kws={"size": annot_kws})
        plt.yticks(rotation=0)
        plt.xticks(rotation=45, ha="right")
        plt.title('Correlation Map', size=20)
        plt.tight_layout()
        st.pyplot(f)

    st.header("Korelasyon Analizi")
    corr_map(df, width=14, height=8, annot_kws=10)

################Tavsiye[[[[[[[[[[[[[[[[[[[
elif selected == 'Tavsiye Sistemi':
    col1, col2 = st.columns([2, 7])

    with col1:
        st.image("Logo.png", width=185)
    with col2:
        # Başlık ve Açıklama
        st.markdown("<h1 style='margin-top: 40px;'>Tavsiye Sistemi</h1>", unsafe_allow_html=True)

    # Veri setini yükle
    df = pd.read_csv('datasets/cleaneed_3.csv')

    # Başlık ve açıklama
    st.write('Bu sayfada, bilgisayar performansıyla ilgili değerleri seçebilir ve filtreleme/sıralama yapabilirsiniz.')

    # Filtreleme seçeneği
    st.subheader('Filtreleme Seçeneği')
    brand_options = ['Tümü'] + df['Ürün Markası'].unique().tolist()
    performance_options = ['Tümü'] + df['performance_level'].unique().tolist()
    usage_options = ['Tümü'] + df['Kullanım Amacı'].unique().tolist()


    selected_brands = st.multiselect('Ürün Markası', brand_options, ['Tümü'])
    selected_performance = st.multiselect('Performance', performance_options, ['Tümü'])
    selected_usage = st.multiselect('Kullanım Amacı', usage_options, ['Tümü'])

    price_range = st.slider('Fiyat Aralığı (TL)', float(df['Ürün Fiyatı (TL)'].min()),
                            float(df['Ürün Fiyatı (TL)'].max()),
                            (float(df['Ürün Fiyatı (TL)'].min()), float(df['Ürün Fiyatı (TL)'].max())))

    # Sıralama seçeneği
    st.subheader('Sıralama Seçeneği')
    sort_by = st.selectbox('Sıralama Ölçütü', ['Ürün Rating', 'Ürün Fiyatı (TL)'])
    sort_order = st.radio('Sıralama Yönü', ['Artan', 'Azalan'])

    # Filtrelenmiş veri setini oluştur
    # Filtrelenmiş veri setini oluştur
    filtered_df = df.copy()
    if 'Tümü' not in selected_brands:
        filtered_df = filtered_df[filtered_df['Ürün Markası'].isin(selected_brands)]
    if 'Tümü' not in selected_performance:
        filtered_df = filtered_df[filtered_df['performance_level'].isin(selected_performance)]
    if 'Tümü' not in selected_usage:
        filtered_df = filtered_df[filtered_df['Kullanım Amacı'].isin(selected_usage)]
    filtered_df = filtered_df[
        (filtered_df['Ürün Fiyatı (TL)'] >= price_range[0]) & (filtered_df['Ürün Fiyatı (TL)'] <= price_range[1])]

    # Filtrelenmiş veri setini sırala
    if sort_by == 'Ürün Rating':
        sorted_df = filtered_df.sort_values(by='Ürün Rating', ascending=sort_order == 'Azalan')
    else:
        sorted_df = filtered_df.sort_values(by='Ürün Fiyatı (TL)', ascending=sort_order == 'Artan')

    # Sonuçları göster
    st.subheader('Filtrelenmiş ve Sıralanmış Sonuçlar')
    st.write(f"Toplam {len(sorted_df)} ürün bulundu.")

    st.write("Ürün URL | Ürün Markası | Ekran Kartı | İşlemci Nesli | Ürün Fiyatı (TL)")

    for i, (_, row) in enumerate(
            sorted_df[['Ürün URL', 'Ürün Markası', 'Ekran Kartı', 'İşlemci Nesli', 'Ürün Fiyatı (TL)']].head(
                5).iterrows()):
        st.write(
            f"{i + 1}.  [Ürün Adı]({row['Ürün URL']}) | {row['Ürün Markası']} | {row['Ekran Kartı']} | {row['İşlemci Nesli']} | {row['Ürün Fiyatı (TL)']} TL")

#########MODEL TAHMİNİ
elif selected == 'Model Tahmini':
    col1, col2 = st.columns([2, 7])

    with col1:
        st.image("Logo.png", width=185)
    with col2:
        st.markdown("<h1 style='margin-top: 40px;'>Model Tahmini</h1>", unsafe_allow_html=True)


    def load_model(modelfile):
        loaded_model = pickle.load(open(modelfile, 'rb'))
        return loaded_model

    model_option = st.selectbox(
        "Model Seçiniz:",
        ("Ridge", "CatBoost", "ElasticNet", "SVR", "XGBoost")
    )


    dff = pd.read_csv("datasets/all_cleaned.csv")

    with st.expander(" ℹ️ Özellikler Hakkında Bilgi", expanded=False):
        st.write("""
                       
                <ul>
                    <li>Ürün Markası - Laptop markası (Örn: ASUS, Lenovo, HP). Marka, genellikle ürünün kalitesi ve müşteri desteği ile ilişkilidir. 🎖️</li>
                    <li>İşletim Sistemi - Cihazın işletim sistemi (Örn: Windows, Mac OS, Linux). Kullanıcı deneyimi ve yazılım uyumluluğu üzerinde büyük etkisi vardır. 💻</li>
                    <li>İşlemci Tipi - Cihazın işlemci türü (Örn: Intel Core i7, AMD Ryzen 5). Performans ve enerji verimliliği açısından önemlidir. 🔋</li>
                    <li>İşlemci Nesli - İşlemcinin nesli (Örn: 10. Nesil, Ryzen 3000 Serisi). Daha yeni nesiller genellikle daha hızlı ve verimlidir. 🚀</li>
                    <li>Ekran Kartı - Cihazın ekran kartı (Örn: Nvidia GeForce GTX 1650). Grafik performansı ve oyun deneyimi için kritiktir. 🎮</li>
                    <li>Kullanım Amacı - Laptopun kullanım amacı (Örn: Oyun, Ofis - İş). Bu, cihazın hangi kullanıcılar için uygun olduğunu belirler. 🖥️</li>
                    <li>Ekran Boyutu (inch) - Laptop ekran boyutu (Örn: 13.3, 15.6). Taşınabilirlik ve kullanım alanı arasındaki dengeyi etkiler. 📏</li>
                    <li>Ram (GB) - Cihazın RAM kapasitesi (Örn: 8 GB, 16 GB, vb.). Çoklu görevlerde ve yoğun uygulamalarda performansı belirler. 🧠</li>
                    <li>SSD Kapasitesi (GB) - Cihazın SSD kapasitesi (Örn: 256 GB, 512 GB, vb.). Depolama kapasitesi ve hız açısından önemlidir. 💾</li>
                    <li>İşlemci Çekirdek Sayısı - İşlemcinin sahip olduğu çekirdek sayısı (Örn: 4, 6, 8, vb.). Daha fazla çekirdek, daha fazla paralel işlem kapasitesi sunar. 🔢</li>
                    <li>Aydınlatma Durumu - Klavyede aydınlatma durumu (Aydınlatmalı: 1, Aydınlatmasız/Belirtilmemiş: 0). Gece kullanımı ve estetik açısından önemlidir. 🌙</li>
                    <li>HDMI - HDMI bağlantı noktası var mı (Var: 1, Yok: 0). Harici ekran bağlantısı için gereklidir. 📺</li>
                    <li>Dokunmatik Ekran - Dokunmatik ekran var mı (Var: 1, Yok: 0). Kullanıcı etkileşimini artırır ve esneklik sağlar. 🖐️</li>
                </ul>
                <p><strong>📢❗🚨Unutmayın, SSD kapasitesi, RAM miktarı ve işlemci çekirdek sayısı, fiyat tahmininde önemli bir rol oynar. Bu bileşenler, cihazın genel performansını ve değerini belirlemede kritik öneme sahiptir.❗</strong></p>
                    """, unsafe_allow_html=True)

    st.subheader("Fiyat tahmini için bilgileri giriniz 💻📊🔍")


    # Kullanıcıdan verileri alma
    # Kullanıcıdan verileri alma
    urun_markasi = st.selectbox("Ürün Markası", dff["Ürün Markası"].unique())


    isletim_sistemi = st.selectbox("İşletim Sistemi",
                                   dff[dff["Ürün Markası"] == urun_markasi]["İşletim Sistemi"].unique())


    islemci_tipi = st.selectbox("İşlemci Tipi", dff[
        (dff["Ürün Markası"] == urun_markasi) & (dff["İşletim Sistemi"] == isletim_sistemi)]["İşlemci Tipi"].unique())


    islemci_nesli = st.selectbox("İşlemci Nesli", dff[
        (dff["Ürün Markası"] == urun_markasi) & (dff["İşletim Sistemi"] == isletim_sistemi) & (
                    dff["İşlemci Tipi"] == islemci_tipi)]["İşlemci Nesli"].unique())
    ekran_karti = st.selectbox("Ekran Kartı", dff[(dff["Ürün Markası"] == urun_markasi) & (dff["İşletim Sistemi"] == isletim_sistemi) & (dff["İşlemci Tipi"] == islemci_tipi) & (dff["İşlemci Nesli"] == islemci_nesli)]["Ekran Kartı"].unique())
    kullanim_amaci = st.selectbox("Kullanım Amacı", dff["Kullanım Amacı"].unique())
    ekran_boyutu = st.selectbox("Ekran Boyutu (inch)", dff["Ekran Boyutu (inch)"].unique())

    ram = st.selectbox("Ram (GB)", dff["Ram (GB)"].unique())

    ssd_kapasitesi = st.selectbox("SSD Kapasitesi (GB)",  dff["SSD Kapasitesi (GB)"].unique())
    islemci_cekirdek_sayisi = st.selectbox("İşlemci Çekirdek Sayısı", dff["İşlemci Çekirdek Sayısı"].unique())

    klavye_aydinlatmasi = st.selectbox("Aydınlatma Durumu", dff["Aydınlatma Durumu"].unique())
    hdmi = st.selectbox("HDMI", dff["HDMI"].unique())
    dokunmatik_ekran = st.selectbox("Dokunmatik Ekran", dff["Dokunmatik Ekran"].unique())



    input_data = {
        "Ürün Markası": urun_markasi,
        "İşletim Sistemi": isletim_sistemi,
        "İşlemci Tipi": islemci_tipi,
        "İşlemci Nesli": islemci_nesli,
        "Ekran Kartı": ekran_karti,
        "Kullanım Amacı": kullanim_amaci,
        "Ekran Boyutu (inch)": ekran_boyutu,
        "Ram (GB)": ram,
        "SSD Kapasitesi (GB)": ssd_kapasitesi,
        "İşlemci Çekirdek Sayısı": islemci_cekirdek_sayisi,
        "Aydınlatma Durumu": klavye_aydinlatmasi,
        "HDMI": hdmi,
        "Dokunmatik Ekran": dokunmatik_ekran,
    }

    #st.write("Kullanıcı Girdileri:", input_data)


    input_data = pd.DataFrame([input_data])


    input_data = pd.get_dummies(input_data, columns=["Ürün Markası", "İşletim Sistemi", "İşlemci Tipi",
                                            "İşlemci Nesli","Kullanım Amacı"], drop_first=True)


    input_data = pd.get_dummies(input_data)


    features = ['Ekran Boyutu (inch)', 'Ram (GB)', 'SSD Kapasitesi (GB)', 'İşlemci Çekirdek Sayısı',
                 'Aydınlatma Durumu', 'HDMI', 'Dokunmatik Ekran', 'Ürün Markası_ASUS', 'Ürün Markası_Apple',
                 'Ürün Markası_CASPER', 'Ürün Markası_Dell', 'Ürün Markası_Game Garaj', 'Ürün Markası_Gigabyte',
                 'Ürün Markası_HP', 'Ürün Markası_Hometech', 'Ürün Markası_Honor', 'Ürün Markası_Huawei',
                 'Ürün Markası_I-Life', 'Ürün Markası_LENOVO', 'Ürün Markası_MONSTER', 'Ürün Markası_MSI',
                 'Ürün Markası_Onda', 'Ürün Markası_Technopc', 'İşletim Sistemi_FreeDos', 'İşletim Sistemi_Linux',
                 'İşletim Sistemi_Mac Os', 'İşletim Sistemi_Ubuntu', 'İşletim Sistemi_Windows', 'İşlemci Tipi_AMD Ryzen 3',
                 'İşlemci Tipi_AMD Ryzen 5', 'İşlemci Tipi_AMD Ryzen 7', 'İşlemci Tipi_AMD Ryzen 9', 'İşlemci Tipi_Apple M1',
                 'İşlemci Tipi_Apple M1 Pro', 'İşlemci Tipi_Apple M2', 'İşlemci Tipi_Apple M2 Max', 'İşlemci Tipi_Apple M2 Pro',
                 'İşlemci Tipi_Apple M3', 'İşlemci Tipi_Apple M3 Pro', 'İşlemci Tipi_Intel Celeron', 'İşlemci Tipi_Intel Core Ultra',
                 'İşlemci Tipi_Intel Core i3', 'İşlemci Tipi_Intel Core i5', 'İşlemci Tipi_Intel Core i7', 'İşlemci Tipi_Intel Core i9',
                 'İşlemci Tipi_Intel Pentium', 'İşlemci Nesli_11. Nesil', 'İşlemci Nesli_12. Nesil', 'İşlemci Nesli_13. Nesil',
                 'İşlemci Nesli_14. Nesil', 'İşlemci Nesli_5. Nesil', 'İşlemci Nesli_7. Nesil', 'İşlemci Nesli_8. Nesil', 'İşlemci Nesli_9. Nesil',
                 'İşlemci Nesli_Apollo Lake', 'İşlemci Nesli_Athlon 3000 Serisi', 'İşlemci Nesli_Gemini Lake', 'İşlemci Nesli_Gemini Lake Refresh',
                 'İşlemci Nesli_Jasper Lake', 'İşlemci Nesli_M serisi', 'İşlemci Nesli_Ryzen 3000 Serisi', 'İşlemci Nesli_Ryzen 4000 Serisi',
                 'İşlemci Nesli_Ryzen 5000 Serisi', 'İşlemci Nesli_Ryzen 6000 Serisi', 'İşlemci Nesli_Ryzen 7000 Serisi', 'İşlemci Nesli_Ryzen 8000 Serisi',
                 'Ekran Kartı_AMD Radeon RX 5500M', 'Ekran Kartı_AMD Radeon RX6500M', 'Ekran Kartı_Dahili Ekran Kartı', 'Ekran Kartı_Intel Graphics',
                 'Ekran Kartı_M1 7-Çekirdekli GPU', 'Ekran Kartı_M1 8-Çekirdekli GPU', 'Ekran Kartı_M1 Pro 16-Çekirdekli GPU', 'Ekran Kartı_M2 10-Çekirdekli GPU',
                 'Ekran Kartı_M2 38-Çekirdekli GPU', 'Ekran Kartı_M2 8-Çekirdekli GPU', 'Ekran Kartı_M2 Pro 16-Çekirdekli GPU',
                 'Ekran Kartı_M2 Pro 19-Çekirdekli GPU', 'Ekran Kartı_M3 10-Çekirdekli GPU', 'Ekran Kartı_M3 18-Çekirdekli GPU',
                 'Ekran Kartı_M3 8-Çekirdekli GPU', 'Ekran Kartı_Nvidia GeForce GTX 1650', 'Ekran Kartı_Nvidia GeForce GTX 1650 Ti',
                 'Ekran Kartı_Nvidia GeForce MX130', 'Ekran Kartı_Nvidia GeForce MX350', 'Ekran Kartı_Nvidia GeForce MX450',
                 'Ekran Kartı_Nvidia GeForce MX550', 'Ekran Kartı_Nvidia GeForce RTX 2050', 'Ekran Kartı_Nvidia GeForce RTX 3050',
                 'Ekran Kartı_Nvidia GeForce RTX 3050 Ti', 'Ekran Kartı_Nvidia GeForce RTX 3070', 'Ekran Kartı_Nvidia GeForce RTX 3070Ti',
                 'Ekran Kartı_Nvidia GeForce RTX 3080', 'Ekran Kartı_Nvidia GeForce RTX 4050', 'Ekran Kartı_Nvidia GeForce RTX 4060',
                 'Ekran Kartı_Nvidia GeForce RTX 4070', 'Ekran Kartı_Nvidia GeForce RTX 4080', 'Ekran Kartı_Nvidia GeForce RTX 4090',
                 'Ekran Kartı_Nvidia GeForce RTX A2000', 'Ekran Kartı_Nvidia GeForce RTX A500', 'Ekran Kartı_Nvidia GeForce RTX3060',
                 'Kullanım Amacı_Ofis - İş', 'Kullanım Amacı_Oyun', 'Kullanım Amacı_Tasarım']



    for col in features:
        if col not in input_data.columns:
            input_data[col] = 0


    input_data = input_data[features]

    results = input_data.values

    if st.button("Tahmin Et"):
        if  model_option == "CatBoost":
            model = load_model("model/catboost_model.pkl")
            prediction = model.predict(results)
            st.write("Tahmin Sonucu:", prediction)
            st.success(f"Tahmin edilen fiyat: {float(prediction[0]):,.2f} TL")

        elif model_option == "Ridge":
            model = load_model("model/ridge_regression_model.pkl")
            prediction = model.predict(results)
            st.write("Tahmin Sonucu:", prediction)
            st.success(f"Tahmin edilen fiyat: {float(prediction[0]):,.2f} TL")

        elif model_option == "ElasticNet":
            model = load_model("model/elasticnet_model.pkl")
            prediction = model.predict(results)
            st.write("Tahmin Sonucu:", prediction)
            st.success(f"Tahmin edilen fiyat: {float(prediction[0]):,.2f} TL")

        elif model_option == "SVR":
            model = load_model("model/svr_model.pkl")
            prediction = model.predict(results)
            st.write("Tahmin Sonucu:", prediction)
            st.success(f"Tahmin edilen fiyat: {float(prediction[0]):,.2f} TL")

        elif model_option == "XGBoost":
            model = load_model("model/xgboost_model.pkl")
            prediction = model.predict(results)
            st.write("Tahmin Sonucu:", prediction)
            st.success(f"Tahmin edilen fiyat: {float(prediction[0]):,.2f} TL")

#############Model Değerlendirmesi##################
elif selected == 'Model Değerlendirmesi':
    col1, col2, col3 = st.columns([1, 7,1])

    with col1:
        st.image("Logo.png", width=185)
    with col2:
        st.markdown("<h1 style='margin-top: 40px;'>Model Değerlendirmesi</h1>", unsafe_allow_html=True)
    st.markdown("""Bu bölümde, farklı modellerin performans sonuçları hakkında bilgiler verilecektir.""")

    st.markdown("""
              ### Başarı Metrikleri""")
    image1 = "model_evaluation/maepng.png"
    image2 = "model_evaluation/r2.png"
    image3 = "model_evaluation/rmse.png"

    # Her resmi ortalamak için boş sütunlar kullanarak düzen oluşturma
    col1, col2, col3 = st.columns([1, 2, 1])  # Ortadaki kolon daha geniş, bu yüzden 2 ile çarpıldı

    with col1:
        st.write("")  # Boşluk bırakma

    with col2:
        st.image(image1, use_column_width=True)
        st.image(image2, use_column_width=True)
        st.image(image3, use_column_width=True)

    with col3:
        st.write("")
    model_option = st.selectbox(
        "Sonuçlar için model seçiniz.",
        ("Ridge", "CatBoost",  "SVR", "ElasticNet", "XGBoost"))
    if model_option == "Ridge":
        st.markdown("""### Model Sonuçları:""")


        col1, col2,col3 = st.columns([1, 1,1])
        with col1:
            st.markdown("""Base Model""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [8.3, 4.81, 8.46]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)
        with col2:
            st.markdown("""HP Önce""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [7680, 4958, 0.86]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)
        with col3:
            st.markdown("""HP Sonra""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [9173, 5613, 0.87]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)


    if model_option == "CatBoost":
        st.markdown("""### Model Sonuçları:""")


        col1, col2,col3 = st.columns([1, 1, 1])
        with col1:
            st.markdown("""Base Model""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [7.27, 4.733, 8.21]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)
        with col2:
            st.markdown("""HP Önce""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [8071, 4425, 0.87]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)
        with col3:
            st.markdown("""HP Sonra""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [7380, 4226, 0.90]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)

    if model_option == "SVR":
        st.markdown("""### Model Sonuçları:""")

        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            st.markdown("""Base Model""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [2.14, 1.44, -2.80]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)

        with col2:
            st.markdown("""HP Önce""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [21132, 14041, -0.04]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)
        with col3:
            st.markdown("""HP Sonra""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [16151, 9248, 0.59]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)
    if model_option == "ElasticNet":
        st.markdown("""### Model Sonuçları:""")

        col1, col2,col3 = st.columns([1, 1, 1])
        with col1:
            st.markdown("""Base Model""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [1.47, 9.02, 5.16]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)
        with col2:
            st.markdown("""HP Önce""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [11465, 7543, 0.68]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)
        with col3:
            st.markdown("""HP Sonra""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [10452, 6594, 0.82]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)
    if model_option == "XGBoost":
        st.markdown("""### XGBoost Model Sonuçları:""")
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            st.markdown("""Base Model""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [8.21, 4.03, 8.21]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)

        with col2:
            st.markdown("""HP Önce""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [7394, 4341,  0.87]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)
        with col3:
            st.markdown("""HP Sonra""")
            rf_res = {
                'Metric': ["RMSE", "MAE", "R2"],
                'Result': [8174, 4540, 0.89]
            }
            rfres1 = pd.DataFrame(rf_res)
            st.write(rfres1)


# Ortadaki sütun geniş tutulur

    model_names = ['CatBoost', 'Ridge', 'SVR', "ElasticNet", "XGBoost"]
    rmse_scores = [8071, 9173, 16151, 10452, 8174]
    mae_scores = [4422, 5613, 9248, 6594, 4540]
    r2_scores = [0.90, 0.87, 0.58, 0.83, 0.89]

    # DataFrame oluşturma
    df_scores = pd.DataFrame({
        'Model': model_names,
        'RMSE': rmse_scores,
        'MAE': mae_scores,
        'R2': r2_scores
    })

    df_scores.set_index('Model', inplace=True)

    # RMSE Grafik
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.bar(df_scores.index, df_scores['RMSE'], color='#abb9a4')
    ax.set_xlabel('Modeller')
    ax.set_ylabel('RMSE Değerleri')
    ax.set_title('Model RMSE Performansları')
    st.pyplot(fig)

    # MAE Grafik
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.bar(df_scores.index, df_scores['MAE'], color='#81a6bb')
    ax.set_xlabel('Modeller')
    ax.set_ylabel('MAE Değerleri')
    ax.set_title('Model MAE Performansları')
    st.pyplot(fig)

    # R2 Grafik
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.bar(df_scores.index, df_scores['R2'], color='#19255d')
    ax.set_xlabel('Modeller')
    ax.set_ylabel('R2 Değerleri')
    ax.set_title('Model R² Performansları')
    st.pyplot(fig)
